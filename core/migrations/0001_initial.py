# Generated by Django 5.1.7 on 2025-04-17 20:13

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Achievement title (e.g., '1 Week Smoke-Free')", max_length=255)),
                ('description', models.TextField(help_text='Details about the achievement.')),
                ('date_earned', models.DateField(default=django.utils.timezone.now)),
                ('points', models.PositiveIntegerField(default=0, help_text='Points for this achievement.')),
            ],
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Badge name, e.g: First Week Smoke-Free', max_length=255)),
                ('description', models.TextField(help_text='What this badge for.')),
                ('icon', models.ImageField(blank=True, help_text='Badge image.', null=True, upload_to='badges/')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, unique=True)),
                ('birth_date', models.DateField(blank=True, help_text="User's date of birth", null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], help_text="User's gender", max_length=10, null=True)),
                ('profile_picture', models.ImageField(blank=True, default='profile_pics/default.png', null=True, upload_to='profile_pics/')),
                ('fcm_token', models.TextField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('achievements', models.ManyToManyField(blank=True, related_name='users', to='core.achievement')),
                ('badges', models.ManyToManyField(blank=True, to='core.badge')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ChatbotIteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_message', models.TextField()),
                ('bot_response', models.TextField()),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, help_text='Time when the message was sent or received.')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DailySmokingLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now, help_text='Log date')),
                ('cigarettes_smoked', models.PositiveIntegerField(help_text='Number of cigarettes smoked')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='smoking_logs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='New Notification', max_length=255)),
                ('message', models.TextField(help_text='Notification content.')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When the notification was created.')),
                ('is_read', models.BooleanField(default=False, help_text='Has the user seen this notification?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Reminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('Remind_at', models.DateTimeField(help_text='Time when the reminder should be triggered.')),
                ('is_sent', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SmokingHabits',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cigs_per_day', models.PositiveIntegerField(help_text='How many cigarettes do you smoke per day?')),
                ('cigs_per_pack', models.PositiveIntegerField(help_text='How many cigarettes are in one pack?')),
                ('pack_cost', models.DecimalField(decimal_places=2, help_text='Cost of one pack.', max_digits=6)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='QuittingPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan_type', models.CharField(choices=[('gradual', 'Gradual Reduction Plan'), ('cold_turkey', 'Cold Turkey Plan')], default='gradual', help_text='Type of quitting plan.', max_length=20)),
                ('start_date', models.DateField(default=django.utils.timezone.now, help_text='The start date of the quitting plan.')),
                ('duration', models.PositiveIntegerField(help_text='Duration of the quitting plan in days.')),
                ('remaining_cigarettes', models.IntegerField(default=0, help_text='Cigarettes allowed per day')),
                ('motivation_level', models.IntegerField(default=5)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('smoking_habits', models.OneToOneField(blank=True, help_text="User's smoking habits.", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='quitting_plan', to='core.smokinghabits')),
            ],
        ),
        migrations.CreateModel(
            name='UserProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('days_without_smoking', models.PositiveIntegerField(default=0, help_text='Days the user has not smoked.')),
                ('money_saved', models.DecimalField(decimal_places=4, default=0.0, help_text='Money saved by not buying cigarettes.', max_digits=8)),
                ('points', models.PositiveIntegerField(default=0, help_text='Total points earned for progress.')),
                ('streak_days', models.PositiveIntegerField(default=0, help_text='Number of consecutive smoke-free days.')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
